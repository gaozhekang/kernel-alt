From 2154f80747164bf52336de2c61b54a87801445b0 Mon Sep 17 00:00:00 2001
From: AltArch Kernel <noreply@centos.org>
Date: Tue, 15 Sep 2020 14:38:27 +0800
Subject: [PATCH 04/25] arm/arm64: Provide a wrapper for SMCCC 1.1 calls

mainline inclusion
from mainline-v5.8-rc5
commit 541625ac47ce9d0835efaee0fcbaa251b0000a37
category: feature
bugzilla: NA
DTS: #231
CVE: NA

--------------------------------

SMCCC 1.1 calls may use either HVC or SMC depending on the PSCI
conduit. Rather than coding this in every call site, provide a macro
which uses the correct instruction. The macro also handles the case
where no conduit is configured/available returning a not supported error
in res, along with returning the conduit used for the call.

This allow us to remove some duplicated code and will be useful later
when adding paravirtualized time hypervisor calls.
---
 include/linux/arm-smccc.h | 45 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 45 insertions(+)

diff --git a/include/linux/arm-smccc.h b/include/linux/arm-smccc.h
index ca1d2cc..4f12a49 100644
--- a/include/linux/arm-smccc.h
+++ b/include/linux/arm-smccc.h
@@ -301,5 +301,50 @@ asmlinkage void __arm_smccc_hvc(unsigned long a0, unsigned long a1,
 #define SMCCC_RET_NOT_SUPPORTED			-1
 #define SMCCC_RET_NOT_REQUIRED			-2
 
+/*
+ * Like arm_smccc_1_1* but always returns SMCCC_RET_NOT_SUPPORTED.
+ * Used when the SMCCC conduit is not defined. The empty asm statement
+ * avoids compiler warnings about unused variables.
+ */
+#define __fail_smccc_1_1(...)						\
+	do {								\
+		__declare_args(__count_args(__VA_ARGS__), __VA_ARGS__);	\
+		asm ("" __constraints(__count_args(__VA_ARGS__)));	\
+		if (___res)						\
+			___res->a0 = SMCCC_RET_NOT_SUPPORTED;		\
+	} while (0)
+
+/*
+ * arm_smccc_1_1_invoke() - make an SMCCC v1.1 compliant call
+ *
+ * This is a variadic macro taking one to eight source arguments, and
+ * an optional return structure.
+ *
+ * @a0-a7: arguments passed in registers 0 to 7
+ * @res: result values from registers 0 to 3
+ *
+ * This macro will make either an HVC call or an SMC call depending on the
+ * current SMCCC conduit. If no valid conduit is available then -1
+ * (SMCCC_RET_NOT_SUPPORTED) is returned in @res.a0 (if supplied).
+ *
+ * The return value also provides the conduit that was used.
+ */
+#define arm_smccc_1_1_invoke(...) ({					\
+	int method = psci_ops.conduit;					\
+	switch (method) {						\
+	case PSCI_CONDUIT_HVC:						\
+		arm_smccc_1_1_hvc(__VA_ARGS__);				\
+		break;							\
+	case PSCI_CONDUIT_SMC:						\
+		arm_smccc_1_1_smc(__VA_ARGS__);				\
+		break;							\
+	default:							\
+		__fail_smccc_1_1(__VA_ARGS__);				\
+		method = PSCI_CONDUIT_NONE;				\
+		break;							\
+		}							\
+	method;								\
+	})
+
 #endif /*__ASSEMBLY__*/
 #endif /*__LINUX_ARM_SMCCC_H*/
-- 
1.8.3.1

