From 29bd03a03f899abed0a519f433890b5dde0320ce Mon Sep 17 00:00:00 2001
From: AltArch Kernel <noreply@centos.org>
Date: Wed, 23 Sep 2020 17:00:18 +0800
Subject: [PATCH 25/25] KVM: arm64: Add tracepoints for PV  qspinlock

euleros inclusion
category: feature
bugzilla: NA
DTS: #231
CVE: NA

--------------------------------

Add tracepoints for PV qspinlock
---
 arch/arm64/kernel/paravirt.c       |  6 ++++
 arch/arm64/kernel/trace-paravirt.h | 66 ++++++++++++++++++++++++++++++++++++++
 virt/kvm/arm/pvsched.c             |  3 ++
 virt/kvm/arm/trace.h               | 18 +++++++++++
 4 files changed, 93 insertions(+)
 create mode 100644 arch/arm64/kernel/trace-paravirt.h

diff --git a/arch/arm64/kernel/paravirt.c b/arch/arm64/kernel/paravirt.c
index f2376b5..cf5d198 100644
--- a/arch/arm64/kernel/paravirt.c
+++ b/arch/arm64/kernel/paravirt.c
@@ -27,6 +27,9 @@
 #include <asm/pvsched-abi.h>
 #include <asm/qspinlock_paravirt.h>
 
+#define CREATE_TRACE_POINTS
+#include "trace-paravirt.h"
+
 struct static_key paravirt_steal_enabled;
 struct static_key paravirt_steal_rq_enabled;
 
@@ -130,6 +133,8 @@ static void kvm_kick_cpu(int cpu)
 	struct arm_smccc_res res;
 
 	arm_smccc_1_1_invoke(ARM_SMCCC_HV_PV_SCHED_KICK_CPU, cpu, &res);
+
+	trace_kvm_kick_cpu("kvm kick cpu", smp_processor_id(), cpu);
 }
 
 static void kvm_wait(u8 *ptr, u8 val)
@@ -146,6 +151,7 @@ static void kvm_wait(u8 *ptr, u8 val)
 
 	dsb(sy);
 	wfi();
+	trace_kvm_wait("kvm wait wfi", smp_processor_id());
 
 out:
 	local_irq_restore(flags);
diff --git a/arch/arm64/kernel/trace-paravirt.h b/arch/arm64/kernel/trace-paravirt.h
new file mode 100644
index 0000000..2d76272
--- /dev/null
+++ b/arch/arm64/kernel/trace-paravirt.h
@@ -0,0 +1,66 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright(c) 2019 Huawei Technologies Co., Ltd
+ * Author: Zengruan Ye <yezengruan@huawei.com>
+ */
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM paravirt
+
+#if !defined(_TRACE_PARAVIRT_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_PARAVIRT_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(kvm_kick_cpu,
+	TP_PROTO(const char *name, int cpu, int target),
+	TP_ARGS(name, cpu, target),
+
+	TP_STRUCT__entry(
+		__string(name, name)
+		__field(int, cpu)
+		__field(int, target)
+	),
+
+	TP_fast_assign(
+		__assign_str(name, name);
+		__entry->cpu = cpu;
+		__entry->target = target;
+	),
+
+	TP_printk("PV qspinlock: %s, cpu %d kick target cpu %d",
+		__get_str(name),
+		__entry->cpu,
+		__entry->target
+	)
+);
+
+TRACE_EVENT(kvm_wait,
+	TP_PROTO(const char *name, int cpu),
+	TP_ARGS(name, cpu),
+
+	TP_STRUCT__entry(
+		__string(name, name)
+		__field(int, cpu)
+	),
+
+	TP_fast_assign(
+		__assign_str(name, name);
+		__entry->cpu = cpu;
+	),
+
+	TP_printk("PV qspinlock: %s, cpu %d wait kvm access wfi",
+		__get_str(name),
+		__entry->cpu
+	)
+);
+
+#endif /* _TRACE_PARAVIRT_H */
+
+/* This part must be outside protection */
+#undef TRACE_INCLUDE_PATH
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_PATH ../../../arch/arm64/kernel/
+#define TRACE_INCLUDE_FILE trace-paravirt
+
+#include <trace/define_trace.h>
diff --git a/virt/kvm/arm/pvsched.c b/virt/kvm/arm/pvsched.c
index f8f8da9..194a3af 100644
--- a/virt/kvm/arm/pvsched.c
+++ b/virt/kvm/arm/pvsched.c
@@ -11,6 +11,8 @@
 
 #include <kvm/arm_hypercalls.h>
 
+#include "trace.h"
+
 void kvm_update_pvsched_preempted(struct kvm_vcpu *vcpu, u32 preempted)
 {
 	__le32 preempted_le;
@@ -57,6 +59,7 @@ int kvm_pvsched_kick_vcpu(struct kvm_vcpu *vcpu)
 		kvm_vcpu_yield_to(target);
 
 	val = SMCCC_RET_SUCCESS;
+	trace_kvm_pvsched_kick_vcpu(vcpu->vcpu_id, target->vcpu_id);
 
 out:
 	return val;
diff --git a/virt/kvm/arm/trace.h b/virt/kvm/arm/trace.h
index e53b596..1645d90 100644
--- a/virt/kvm/arm/trace.h
+++ b/virt/kvm/arm/trace.h
@@ -277,6 +277,24 @@
 		  __entry->vcpu_id, __entry->irq, __entry->level)
 );
 
+TRACE_EVENT(kvm_pvsched_kick_vcpu,
+	TP_PROTO(int vcpu_id, int target_vcpu_id),
+	TP_ARGS(vcpu_id, target_vcpu_id),
+
+	TP_STRUCT__entry(
+		__field(int, vcpu_id)
+		__field(int, target_vcpu_id)
+	),
+
+	TP_fast_assign(
+		__entry->vcpu_id = vcpu_id;
+		__entry->target_vcpu_id = target_vcpu_id;
+	),
+
+	TP_printk("PV qspinlock: vcpu %d kick target vcpu %d",
+		  __entry->vcpu_id, __entry->target_vcpu_id)
+);
+
 #endif /* _TRACE_KVM_H */
 
 #undef TRACE_INCLUDE_PATH
-- 
1.8.3.1

